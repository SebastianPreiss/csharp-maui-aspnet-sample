classDiagram

    direction BT

    namespace MAUI {
        class ContentPage {

        }
    }

    namespace CustomApp {
        
        class UsersPage {
            <<XAML + CodeBehind>>
            + object BindingContext
            + UsersPage()
            + void OnReloadClicked()
            + void OnUserClicked()
            + void OnCreateClicked()
        }
        class IssuesPage {
            <<XAML + CodeBehind>>
            + IssuesPage()
            + object BindingContext
            + void OnReloadClicked()
            + void OnIssueClicked()
            + void OnCreateClicked()
        }
        class UserPage {
            <<XAML + CodeBehind>>
            + UserPage()
            + object BindingContext
            + void OnSaveClicked()
        }
        class IssuePage {
            <<XAML + CodeBehind>>
            + IssuePage()
            + object BindingContext
        }

        class UsersPageModel {
            <<Singleton>>
            + UsersPageModel Instance $
            - UsersPageModel()
            # List~UserGet~ ReloadInternal()
        }
        class IssuesPageModel {
            <<Singleton>>
            + IssuesPageModel Instance $
            - IssuesPageModel()
            # List~IssueGet~ ReloadInternal()
        }

        class UserPageModel {
            <<Singleton>>
            + UserPageModel Instance $
            - UserPageModel()
        }
        class IssuePageModel {
            <<Singleton>>
            + UserPageModel Instance $
            - IssuePageModel()
        }

        class AbstractItemsPageModel~T~ {
            <<Abstract>>
            + bool IsReloadEnabled
            + bool IsCreateEnabled
            + bool IsLoadVisible
            + bool IsErrorVisible
            + bool IsItemListVisible
            + string ErrorMessage
            + List~T~ ItemList
            + void Reload()
            # List~T~ ReloadInternal() *
        }
        class AbstractItemPageModel~T~ {
            <<Abstract>>
            + bool IsSaveEnabled
            + bool IsLoadVisible
            + bool IsErrorVisible
            + string ErrorMessage
            + T Item
        }

        class AbstractModel {
            <<Abstract>>
            + PropertyChangedEventHandler PropertyChanged
            # bool SetProperty~T~(ref T storage, T value)
            + void OnPropertyChanged(string name
        }

    }

    namespace System {
        
        class INotifyPropertyChanged {
            <<Interface>>
        }

    }

    ContentPage <|-- UsersPage
    ContentPage <|-- UserPage
    ContentPage <|-- IssuesPage
    ContentPage <|-- IssuePage

    UsersPage ..> UsersPageModel : BindingContext
    IssuesPage ..> IssuesPageModel : BindingContext

    UserPage ..> UserPageModel  : BindingContext
    IssuePage ..> IssuePageModel : BindingContext

    UsersPageModel --|> AbstractItemsPageModel : T = UserGet
    IssuesPageModel --|> AbstractItemsPageModel : T = IssueGet

    UserPageModel --|> AbstractItemPageModel : T = UserGet
    IssuePageModel --|> AbstractItemPageModel : T = IssueGet

    AbstractItemsPageModel --|> AbstractModel
    AbstractItemPageModel --|> AbstractModel

    AbstractModel --|> INotifyPropertyChanged

    style ContentPage fill:white
    style UsersPage fill:yellow
    style UserPage fill:yellow
    style IssuesPage fill:yellow
    style IssuePage fill:yellow
    style INotifyPropertyChanged fill:white